1 Test a real world object(like a pen)
2 Test a piece of software
3 Write test code for a function
4 Troubleshoot an existing issue

Big Picture Understanding
Knowing How the Pieces Fit Together
Organization
Practicality

Testing a Real World Object
Q: How would you test a paperclip?
Step 1: Who will use it? And why?

Step 2: What are the use cases?

Step 3: What are the bounds of use?

Step 4: What are the stress/failure conditions?

Step 5: How would you perform the testing?


Testing a Piece of Software

Manual vs. Automated Testing
Some things are simply much better with manual testing (such as if content represents pronography). Additionally, whereas
a computer can generally recognize only issues that it has been told to look for, human observation may reveal new issues that
have not been specifically examined.

Black Box Testing vs. White Box Testing

Step 1: Are we doing Black Box Testing or White Box Testing?

Step 2: Who will use it? And why?

Step 3: What are the use cases?

Step 4: What are the bounds of use?

Step 5: What are the stress/failure conditions?

Step 6: How would you perform the testing?


Testing a Function(test sort(int[] array))
Step 1: Define the test cases
The normal cases
The extremes (empty array)
Nulls and "illegal" input
Strange input (already sorted array)

Step 2: Define the expected result

Step 3: write test code
void testAddThreeSorted() {
	MyList list = new MyList();
	list.testAddThreeSorted(3,1,2);
	assertEquals(list.getElement(0), 1);
	assertEquals(list.getElement(1), 2);
	assertEquals(list.getElement(2), 3);
}


Troubleshooting Questions

Step 1: Understand the Scenario

Step 2: Break Down the Problem

Step 3: Create Specific Manageable Tests